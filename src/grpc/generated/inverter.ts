// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.1
// source: inverter.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "inverter";

export interface Empty {
}

export interface InvertersRequest {
  inverterCode?: string | undefined;
  inverterName?: string | undefined;
  isFlag?: boolean | undefined;
  page: number;
  size: number;
  sortBy?: string | undefined;
  orderBy?: string | undefined;
}

export interface InverterResponse {
  id: number;
  inverterName: string;
  inverterCode: string;
  slaveAddress: string;
  startAddress: string;
  numberOfPoles: number;
  updatedAt: Timestamp | undefined;
  isFlag: boolean;
}

export interface InverterListResponse {
  inverters: InverterResponse[];
  totalElements: number;
  pages: number;
  size: number;
  page: number;
  isLast: boolean;
}

function createBaseEmpty(): Empty {
  return {};
}

export const Empty: MessageFns<Empty> = {
  encode(_: Empty, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Empty {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmpty();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Empty {
    return {};
  },

  toJSON(_: Empty): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Empty>, I>>(base?: I): Empty {
    return Empty.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Empty>, I>>(_: I): Empty {
    const message = createBaseEmpty();
    return message;
  },
};

function createBaseInvertersRequest(): InvertersRequest {
  return {
    inverterCode: undefined,
    inverterName: undefined,
    isFlag: undefined,
    page: 0,
    size: 0,
    sortBy: undefined,
    orderBy: undefined,
  };
}

export const InvertersRequest: MessageFns<InvertersRequest> = {
  encode(message: InvertersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inverterCode !== undefined) {
      writer.uint32(10).string(message.inverterCode);
    }
    if (message.inverterName !== undefined) {
      writer.uint32(18).string(message.inverterName);
    }
    if (message.isFlag !== undefined) {
      writer.uint32(24).bool(message.isFlag);
    }
    if (message.page !== 0) {
      writer.uint32(32).int32(message.page);
    }
    if (message.size !== 0) {
      writer.uint32(40).int32(message.size);
    }
    if (message.sortBy !== undefined) {
      writer.uint32(50).string(message.sortBy);
    }
    if (message.orderBy !== undefined) {
      writer.uint32(58).string(message.orderBy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InvertersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInvertersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inverterCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inverterName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.isFlag = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sortBy = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.orderBy = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InvertersRequest {
    return {
      inverterCode: isSet(object.inverterCode) ? globalThis.String(object.inverterCode) : undefined,
      inverterName: isSet(object.inverterName) ? globalThis.String(object.inverterName) : undefined,
      isFlag: isSet(object.isFlag) ? globalThis.Boolean(object.isFlag) : undefined,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      sortBy: isSet(object.sortBy) ? globalThis.String(object.sortBy) : undefined,
      orderBy: isSet(object.orderBy) ? globalThis.String(object.orderBy) : undefined,
    };
  },

  toJSON(message: InvertersRequest): unknown {
    const obj: any = {};
    if (message.inverterCode !== undefined) {
      obj.inverterCode = message.inverterCode;
    }
    if (message.inverterName !== undefined) {
      obj.inverterName = message.inverterName;
    }
    if (message.isFlag !== undefined) {
      obj.isFlag = message.isFlag;
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    if (message.sortBy !== undefined) {
      obj.sortBy = message.sortBy;
    }
    if (message.orderBy !== undefined) {
      obj.orderBy = message.orderBy;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InvertersRequest>, I>>(base?: I): InvertersRequest {
    return InvertersRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InvertersRequest>, I>>(object: I): InvertersRequest {
    const message = createBaseInvertersRequest();
    message.inverterCode = object.inverterCode ?? undefined;
    message.inverterName = object.inverterName ?? undefined;
    message.isFlag = object.isFlag ?? undefined;
    message.page = object.page ?? 0;
    message.size = object.size ?? 0;
    message.sortBy = object.sortBy ?? undefined;
    message.orderBy = object.orderBy ?? undefined;
    return message;
  },
};

function createBaseInverterResponse(): InverterResponse {
  return {
    id: 0,
    inverterName: "",
    inverterCode: "",
    slaveAddress: "",
    startAddress: "",
    numberOfPoles: 0,
    updatedAt: undefined,
    isFlag: false,
  };
}

export const InverterResponse: MessageFns<InverterResponse> = {
  encode(message: InverterResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.inverterName !== "") {
      writer.uint32(18).string(message.inverterName);
    }
    if (message.inverterCode !== "") {
      writer.uint32(26).string(message.inverterCode);
    }
    if (message.slaveAddress !== "") {
      writer.uint32(34).string(message.slaveAddress);
    }
    if (message.startAddress !== "") {
      writer.uint32(42).string(message.startAddress);
    }
    if (message.numberOfPoles !== 0) {
      writer.uint32(48).int32(message.numberOfPoles);
    }
    if (message.updatedAt !== undefined) {
      Timestamp.encode(message.updatedAt, writer.uint32(58).fork()).join();
    }
    if (message.isFlag !== false) {
      writer.uint32(64).bool(message.isFlag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InverterResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInverterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.inverterName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.inverterCode = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.slaveAddress = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.startAddress = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.numberOfPoles = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updatedAt = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.isFlag = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InverterResponse {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      inverterName: isSet(object.inverterName) ? globalThis.String(object.inverterName) : "",
      inverterCode: isSet(object.inverterCode) ? globalThis.String(object.inverterCode) : "",
      slaveAddress: isSet(object.slaveAddress) ? globalThis.String(object.slaveAddress) : "",
      startAddress: isSet(object.startAddress) ? globalThis.String(object.startAddress) : "",
      numberOfPoles: isSet(object.numberOfPoles) ? globalThis.Number(object.numberOfPoles) : 0,
      updatedAt: isSet(object.updatedAt) ? fromJsonTimestamp(object.updatedAt) : undefined,
      isFlag: isSet(object.isFlag) ? globalThis.Boolean(object.isFlag) : false,
    };
  },

  toJSON(message: InverterResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.inverterName !== "") {
      obj.inverterName = message.inverterName;
    }
    if (message.inverterCode !== "") {
      obj.inverterCode = message.inverterCode;
    }
    if (message.slaveAddress !== "") {
      obj.slaveAddress = message.slaveAddress;
    }
    if (message.startAddress !== "") {
      obj.startAddress = message.startAddress;
    }
    if (message.numberOfPoles !== 0) {
      obj.numberOfPoles = Math.round(message.numberOfPoles);
    }
    if (message.updatedAt !== undefined) {
      obj.updatedAt = fromTimestamp(message.updatedAt).toISOString();
    }
    if (message.isFlag !== false) {
      obj.isFlag = message.isFlag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InverterResponse>, I>>(base?: I): InverterResponse {
    return InverterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InverterResponse>, I>>(object: I): InverterResponse {
    const message = createBaseInverterResponse();
    message.id = object.id ?? 0;
    message.inverterName = object.inverterName ?? "";
    message.inverterCode = object.inverterCode ?? "";
    message.slaveAddress = object.slaveAddress ?? "";
    message.startAddress = object.startAddress ?? "";
    message.numberOfPoles = object.numberOfPoles ?? 0;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Timestamp.fromPartial(object.updatedAt)
      : undefined;
    message.isFlag = object.isFlag ?? false;
    return message;
  },
};

function createBaseInverterListResponse(): InverterListResponse {
  return { inverters: [], totalElements: 0, pages: 0, size: 0, page: 0, isLast: false };
}

export const InverterListResponse: MessageFns<InverterListResponse> = {
  encode(message: InverterListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.inverters) {
      InverterResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.totalElements !== 0) {
      writer.uint32(16).int32(message.totalElements);
    }
    if (message.pages !== 0) {
      writer.uint32(24).int32(message.pages);
    }
    if (message.size !== 0) {
      writer.uint32(32).int32(message.size);
    }
    if (message.page !== 0) {
      writer.uint32(40).int32(message.page);
    }
    if (message.isLast !== false) {
      writer.uint32(48).bool(message.isLast);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InverterListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInverterListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inverters.push(InverterResponse.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.totalElements = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.pages = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.isLast = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InverterListResponse {
    return {
      inverters: globalThis.Array.isArray(object?.inverters)
        ? object.inverters.map((e: any) => InverterResponse.fromJSON(e))
        : [],
      totalElements: isSet(object.totalElements) ? globalThis.Number(object.totalElements) : 0,
      pages: isSet(object.pages) ? globalThis.Number(object.pages) : 0,
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      isLast: isSet(object.isLast) ? globalThis.Boolean(object.isLast) : false,
    };
  },

  toJSON(message: InverterListResponse): unknown {
    const obj: any = {};
    if (message.inverters?.length) {
      obj.inverters = message.inverters.map((e) => InverterResponse.toJSON(e));
    }
    if (message.totalElements !== 0) {
      obj.totalElements = Math.round(message.totalElements);
    }
    if (message.pages !== 0) {
      obj.pages = Math.round(message.pages);
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.isLast !== false) {
      obj.isLast = message.isLast;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InverterListResponse>, I>>(base?: I): InverterListResponse {
    return InverterListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InverterListResponse>, I>>(object: I): InverterListResponse {
    const message = createBaseInverterListResponse();
    message.inverters = object.inverters?.map((e) => InverterResponse.fromPartial(e)) || [];
    message.totalElements = object.totalElements ?? 0;
    message.pages = object.pages ?? 0;
    message.size = object.size ?? 0;
    message.page = object.page ?? 0;
    message.isLast = object.isLast ?? false;
    return message;
  },
};

export type InverterServiceService = typeof InverterServiceService;
export const InverterServiceService = {
  findAll: {
    path: "/inverter.InverterService/FindAll",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: InvertersRequest): Buffer => Buffer.from(InvertersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): InvertersRequest => InvertersRequest.decode(value),
    responseSerialize: (value: InverterListResponse): Buffer =>
      Buffer.from(InverterListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): InverterListResponse => InverterListResponse.decode(value),
  },
} as const;

export interface InverterServiceServer extends UntypedServiceImplementation {
  findAll: handleUnaryCall<InvertersRequest, InverterListResponse>;
}

export interface InverterServiceClient extends Client {
  findAll(
    request: InvertersRequest,
    callback: (error: ServiceError | null, response: InverterListResponse) => void,
  ): ClientUnaryCall;
  findAll(
    request: InvertersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: InverterListResponse) => void,
  ): ClientUnaryCall;
  findAll(
    request: InvertersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: InverterListResponse) => void,
  ): ClientUnaryCall;
}

export const InverterServiceClient = makeGenericClientConstructor(
  InverterServiceService,
  "inverter.InverterService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): InverterServiceClient;
  service: typeof InverterServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
